name: Deploy Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Verify build context
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          test -f Dockerfile || { echo "Dockerfile not found in $(pwd)"; exit 1; }
          cat Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Debug Secrets (TEMP)
        run: |
          echo "ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}"
          echo "ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}"

      - name: Log in to Amazon ECR
        run: |
          echo "Logging into ECR: ${{ secrets.AWS_ECR_REGISTRY }}"
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push Docker image to ECR
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t ${{ steps.meta.outputs.tags }} \
            --cache-to=type=inline \
            --cache-from=type=registry,ref=${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:cache \
            .
        env:
          DOCKER_BUILDKIT: 1

      - name: Verify image push
        run: |
          aws ecr describe-images --repository-name ${{ secrets.AWS_ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }} || { echo "Image not found in ECR"; exit 1; }

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --region ${{ secrets.AWS_REGION }} > task-definition.json

      - name: Update task definition with new image
        run: |
          sed -i 's|"image":.*|"image": "${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest",|' task-definition.json

      - name: Register task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition.json --region ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --force-new-deployment --region ${{ secrets.AWS_REGION }}

      - name: Verify deployment
        run: |
          aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --region ${{ secrets.AWS_REGION }} || { echo "Deployment failed"; exit 1; }
          echo "Deployment successful"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      TOGGLE_PASSWORD: ${{ secrets.TOGGLE_PASSWORD }}
      TOGGLE_KEY: ${{ secrets.TOGGLE_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest flake8

      - name: Lint & test
        run: |
          flake8 app/ inai_project/ serve.py --count --exit-zero --max-line-length=127
          pytest tests/
