name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: inai-voice-assistant
  ECS_CLUSTER: inai-ecs-cluster
  ECS_SERVICE: inai-service
  CONTAINER_NAME: inai-container

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

  test:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies and run tests
        run: |
          pip install -r requirements.txt pytest
          pytest

  deploy:
    needs: [build-and-push, test]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get latest image URI
        id: image
        run: |
          IMAGE_URI=$(aws ecr describe-repositories \
            --repository-names $ECR_REPOSITORY \
            --region $AWS_REGION \
            --query 'repositories[0].repositoryUri' \
            --output text):latest
          echo "image_uri=$IMAGE_URI" >> $GITHUB_ENV

      - name: Register new ECS task definition
        run: |
          sed "s|<IMAGE_URI>|${{ env.image_uri }}|" .aws/task-definition.json > updated-task-def.json
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json

      - name: Deploy to ECS
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $ECR_REPOSITORY \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment
